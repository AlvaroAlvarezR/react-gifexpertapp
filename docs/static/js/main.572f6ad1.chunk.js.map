{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA4BeA,EAzBK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAQA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAAU,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,QCPzCG,EATK,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IACxB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACZN,EADY,iDACoCO,UAAUF,GAD9C,+DAEMG,MAAMR,GAFZ,cAEZS,EAFY,gBAGGA,EAAUC,OAHb,uBAGXC,EAHW,EAGXA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QARxB,kBAWXY,GAXW,4CAAF,sDCIPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAErB,ECHwB,SAACA,GACzB,MAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OATAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBV,KAAMa,EACNL,SAAS,SAGlB,CAACd,IAEGe,EDXwBK,CAAapB,GAAhCW,EAAZ,EAAOL,KAAaQ,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIlB,UAAU,mCAAd,SAAkDI,IACjDc,GAAW,mBAAGlB,UAAU,kCAAb,qBACZ,qBAAKA,UAAU,aAAf,SACI,6BACMe,EAAOH,KAAI,SAAAC,GAAG,OAChB,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEX7BW,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAKA,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACK2C,EAAWd,KAAI,SAAAR,GAAQ,OACrB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCdjCuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.572f6ad1.chunk.js","sourcesContent":["import React, { useState }  from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length>2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        };\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {/* <h1>{inputValue}</h1> */}\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={(e) => setInputValue(e.target.value)}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","export const getGifs= async (category) => {\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=7HYbcBlLjsuPor1NPAaiXq8xBdyO1wb6`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n    const gifs = data.map(img => {\r\n        return { \r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n    return gifs;\r\n}","// import React, {useState, useEffect} from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category)    \r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate_animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate_animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid \">\r\n                <ol>\r\n                    { images.map(img =>(\r\n                    <GifGridItem key={img.id} {...img}/>\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => setstate({\r\n                data: imgs,\r\n                loading: false,\r\n            }))\r\n            // .then(setImages(imgs))\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","import { useState } from \"react\"\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'HunterXHunter']);\r\n    //     // setCategories(cats => [...cats, 'HunterXHunter']);\r\n    // };\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories}/>\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n               { categories.map(category=>(\r\n                   <GifGrid key={category} category={category}/>\r\n               ))}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}